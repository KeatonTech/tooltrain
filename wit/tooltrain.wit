package tooltrain:base;

interface inputs {
    record argument-spec {
        name: string,
        description: string,
        data-type: string,

        // When true, the program will respond to update-arg calls
        // for this argument.
        supports-updates: bool,
    }

    record schema {
        name: string,
        description: string,
        arguments: list<argument-spec>,

        // When true, executing this program causes some meaningful
        // state change such that this program should not be
        // automatically re-executed when its arguments change.
        performs-state-change: bool
    }

    record tree-node {
        id: string,
        value: list<u8>,  // Encoded Flexbuffer containing a value
        has-children: bool
    }
}

interface streaming-outputs {
    use inputs.{tree-node};

    resource value-output {
        set: func(value: list<u8>); // Encoded Flexbuffer containing a value
        destroy: func();
    }

    variant list-output-request {
        close,
        load-more(/* limit= */u32),
    }
    
    resource list-output-request-stream {
        poll-request: func() -> option<list-output-request>;
        poll-request-blocking: func() -> list-output-request;
    }

    resource list-output {
        add: func(event: list<u8>); // Encoded Flexbuffer containing a value
        pop: func();
        clear: func();
        set-has-more-rows: func(has-more-rows: bool);
        destroy: func();
        get-request-stream: func() -> list-output-request-stream;
    }

    variant tree-output-request {
        close,
        load-children(/* parent= */string),
    }

    resource tree-output-request-stream {
        poll-request: func() -> option<tree-output-request>;
        poll-request-blocking: func() -> tree-output-request;
    }

    resource tree-output {
        add: func(parent: option<string>, children: list<tree-node>);
        remove: func(id: string);
        clear: func();
        destroy: func();
        get-request-stream: func() -> tree-output-request-stream;
    }
}

interface streaming-inputs {
    use inputs.{tree-node};
    
    resource value-change-stream {
        poll-change: func() -> option<option<list<u8>>>;
        poll-change-blocking: func() -> option<list<u8>>;
    }

    resource value-input {
        get: func() -> option<list<u8>>; // Encoded Flexbuffer containing a value
        destroy: func();
        get-change-stream: func() -> value-change-stream;
    }

    variant list-change {
        replace(list<list<u8>>),
        append(list<u8>),
        pop,
        has-more-pages(bool)
    }

    resource list-change-stream {
        poll-change: func() -> option<list-change>;
        poll-change-blocking: func() -> list-change;
    }

    resource list-input {
        get: func() -> list<u8>; // Encoded Flexbuffer containing a List
        request-more: func(limit: u32);
        destroy: func();
        get-change-stream: func() -> list-change-stream;
    }

    variant tree-change {
        replace(list<tree-node>),
        append(list<tree-node>),
        remove(list<string>)
    }

    resource tree-change-stream {
        poll-change: func() -> option<tree-change>;
        poll-change-blocking: func() -> tree-change;
    }

    resource tree-input {
        get: func() -> list<tree-node>; // Encoded Flexbuffer containing all nodes
        request-children: func(of: string);
        destroy: func();
        get-change-stream: func() -> tree-change-stream;
    }

    variant input {
        value-input(value-input),
        list-input(list-input),
        tree-input(tree-input)
    }
}

/** Interface for plugins that can accept and/or output streams of data during a single run. */
world streaming-plugin {
    import wasi:filesystem/preopens@0.2.1;
    import wasi:filesystem/types@0.2.1;
    import wasi:http/outgoing-handler@0.2.1;

    use inputs.{schema};
    use streaming-inputs.{input, value-input, list-input, tree-input};
    use streaming-outputs.{value-output, list-output, tree-output};

    import add-value-output: func(
        name: string,
        description: string,
        data-type: string,
        initial-value: option<list<u8>>, // Encoded Flexbuffer containing a value
    ) -> value-output;

    import add-list-output: func(
        name: string,
        description: string,
        data-type: string, // Must be a struct
    ) -> list-output;

    import add-tree-output: func(
        name: string,
        description: string,
        data-type: string,
    ) -> tree-output;

    import add-value-input: func(
        name: string,
        description: string,
        data-type: string,
        initial-value: option<list<u8>>, // Encoded Flexbuffer containing a value
    ) -> value-input;

    import add-list-input: func(
        name: string,
        description: string,
        data-type: string, // Must be a struct
    ) -> list-input;

    import add-tree-input: func(
        name: string,
        description: string,
        data-type: string,
    ) -> tree-input;

    export get-schema: func() -> schema;

    export run: func(inputs: list<input>) -> result<string, string>;
}

interface discrete-outputs {
    record output {
        name: string,
        description: string,
        data-type: string,
        value: list<u8>                // Encoded Flexbuffer containing a value
    }
}

/** Interface for plugins that operate on a static input and produce a static output. */
world discrete-plugin {
    import wasi:filesystem/preopens@0.2.1;
    import wasi:filesystem/types@0.2.1;
    import wasi:http/outgoing-handler@0.2.1;

    use inputs.{schema};
    use discrete-outputs.{output};

    export get-schema: func() -> schema;

    export run: func(inputs: list<list<u8>>) -> result<list<output>, string>;
}
